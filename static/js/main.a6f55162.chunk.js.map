{"version":3,"sources":["components/messagePage/MessageForm.js","services/messages.service.js","components/messagePage/MessageFormContainer.js","components/messagePage/MessagePage.js","components/managePage/Message.js","components/managePage/MessagesList.js","components/managePage/MessagesManager.js","components/managePage/MessagesManagerContainer.js","components/managePage/ManagePage.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","Form","styled","form","SenderReceiverSection","div","SendButton","Button","StyledInput","StyledError","MessageForm","handleSubmit","handleChange","handleBlur","values","isSubmitting","onSubmit","size","onChange","onBlur","value","sender","placeholder","name","prefix","UserOutlined","component","receiver","subject","message","autoSize","minRows","maxRows","htmlType","loading","serverUrl","process","send","data","a","axios","post","timeout","then","result","get","userId","deleteMessage","messageId","delete","initialValues","validationSchema","Yup","shape","required","MessageFormContainer","useCallback","actions","messagesService","resetForm","success","catch","error","finally","setSubmitting","Container","ContentContainer","MessagePage","Panel","Collapse","MessageText","MessageBox","MessageDate","Message","onDelete","header","extra","title","okText","cancelText","onConfirm","e","stopPropagation","id","onCancel","type","onClick","dayjs","createdAt","format","MessagesList","messages","onMessageDelete","length","image","Empty","PRESENTED_IMAGE_SIMPLE","map","key","TabPane","Tabs","Search","UserIdInput","MessagesManager","onUserChange","receivedMessages","sentMessages","enterButton","onSearch","defaultActiveKey","tab","MessagesManagerContainer","useState","setUserId","setSentMessages","setReceivedMessages","useEffect","loadMessages","sent","received","popMessage","filterFunc","current","filter","m","config","top","Nav","nav","NavList","ul","NavItem","li","Link","NavLink","App","basename","exact","to","path","ManagePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a6f55162.chunk.js","sourcesContent":["import React from \"react\";\nimport types from \"prop-types\";\nimport { Input, Button } from \"antd\";\nimport styled from \"styled-components\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { ErrorMessage } from \"formik\";\nconst { TextArea } = Input;\n\nconst Form = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst SenderReceiverSection = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin-bottom: 26px;\n`;\n\nconst SendButton = styled(Button)`\n  margin-top: 40px;\n  width: 140px;\n  max-width: 100%;\n`;\n\nconst StyledInput = styled(Input)`\n  margin: 8px;\n`;\n\nconst StyledError = styled.div`\n  color: red;\n`;\n\nconst MessageForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  isSubmitting,\n}) => {\n  return (\n    <Form onSubmit={handleSubmit}>\n      <SenderReceiverSection>\n        <StyledInput\n          size=\"large\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.sender}\n          placeholder=\"From\"\n          name=\"sender\"\n          prefix={<UserOutlined />}\n        />\n        <ErrorMessage component={StyledError} name=\"sender\" />\n        <StyledInput\n          size=\"large\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.receiver}\n          placeholder=\"To\"\n          name=\"receiver\"\n          prefix={<UserOutlined />}\n        />\n        <ErrorMessage component={StyledError} name=\"receiver\" />\n      </SenderReceiverSection>\n      <StyledInput\n        size=\"large\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.subject}\n        placeholder=\"Subject\"\n        name=\"subject\"\n      />\n      <ErrorMessage component={StyledError} name=\"subject\" />\n      <TextArea\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.message}\n        placeholder=\"Message\"\n        name=\"message\"\n        size=\"large\"\n        autoSize={{ minRows: 4, maxRows: 10 }}\n      />\n      <ErrorMessage component={StyledError} name=\"message\" />\n      <SendButton htmlType=\"submit\" loading={isSubmitting}>\n        Send\n      </SendButton>\n    </Form>\n  );\n};\n\nMessageForm.propTypes = {\n  handleSubmit: types.func.isRequired,\n  handleChange: types.func.isRequired,\n  handleBlur: types.func.isRequired,\n  values: types.object.isRequired,\n  isSubmitting: types.bool.isRequired,\n};\n\nexport default MessageForm;\n","/* eslint-disable no-unused-vars */\nimport axios from \"axios\";\n\nconst TIMEOUT = 5000;\nconst serverUrl = process.env.REACT_APP_MESSAGES_SERVER_URL;\n\nconst send = async (data) => {\n  return axios\n    .post(serverUrl, data, {\n      timeout: TIMEOUT,\n    })\n    .then((result) => result.data);\n};\n\nconst get = async (userId) => {\n  return axios\n    .get(`${serverUrl}${userId}`, {\n      timeout: TIMEOUT,\n    })\n    .then((result) => result.data);\n};\n\nconst deleteMessage = async (messageId) => {\n  return axios\n    .delete(`${serverUrl}${messageId}`, {\n      timeout: TIMEOUT,\n    })\n    .then((result) => result.data);\n};\n\nexport default {\n  send,\n  get,\n  deleteMessage,\n};\n","import React, { useCallback } from \"react\";\nimport * as Yup from \"yup\";\nimport { message } from \"antd\";\nimport { Formik } from \"formik\";\nimport MessageForm from \"./MessageForm\";\nimport messagesService from \"../../services/messages.service\";\n\nconst initialValues = { subject: \"\", sender: \"\", receiver: \"\", message: \"\" };\n\nconst validationSchema = Yup.object().shape({\n  subject: Yup.string().required(\"Required\"),\n  sender: Yup.string().required(\"Required\"),\n  receiver: Yup.string().required(\"Required\"),\n  message: Yup.string().required(\"Required\"),\n});\n\nconst MessageFormContainer = () => {\n  const handleSubmit = useCallback((values, actions) => {\n    messagesService\n      .send(values)\n      .then(() => {\n        actions.resetForm();\n        message.success(\"Message sent successfully\");\n        return 1;\n      })\n      .catch(() => {\n        message.error(\"Failed to send message\");\n      })\n      .finally(() => actions.setSubmitting(false));\n  }, []);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {MessageForm}\n    </Formik>\n  );\n};\n\nexport default MessageFormContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport MessageFormContainer from \"./MessageFormContainer\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ContentContainer = styled.div`\n  max-width: 600px;\n  min-width: 280px;\n  width: 50%;\n  padding: 4%;\n  margin-top: 4%;\n  border-radius: 20px;\n  border: 1px solid #d9d9d9;\n`;\n\nconst MessagePage = () => {\n  return (\n    <Container>\n      <ContentContainer>\n        <MessageFormContainer />\n      </ContentContainer>\n    </Container>\n  );\n};\n\nexport default MessagePage;\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport types from \"prop-types\";\nimport styled from \"styled-components\";\nimport { Button, Collapse, Popconfirm } from \"antd\";\n\nconst DATE_FORMAT = \"DD/MM/YYYY HH:mm:ss\";\n\nconst { Panel } = Collapse;\n\nconst MessageText = styled.div`\n  white-space: pre-line;\n`;\n\nconst MessageBox = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MessageDate = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n`;\n\nconst Message = ({ message, onDelete, userId }) => {\n  const header =\n    userId === message.receiver\n      ? `${message.sender}: ${message.subject}`\n      : `to ${message.receiver}: ${message.subject}`;\n  return (\n    <>\n      <Collapse>\n        <Panel\n          header={header}\n          extra={\n            <Popconfirm\n              title=\"Are you sure you want to delete this message?\"\n              okText=\"Yes\"\n              cancelText=\"No\"\n              onConfirm={(e) => {\n                e.stopPropagation();\n                onDelete(message.id);\n              }}\n              onCancel={(e) => e.stopPropagation()}\n            >\n              <Button type=\"text\" onClick={(e) => e.stopPropagation()}>\n                Delete\n              </Button>\n            </Popconfirm>\n          }\n        >\n          <MessageBox>\n            <MessageDate>\n              {dayjs(message.createdAt).format(DATE_FORMAT)}\n            </MessageDate>\n            <MessageText>{message.message}</MessageText>\n          </MessageBox>\n        </Panel>\n      </Collapse>\n    </>\n  );\n};\n\nMessage.propTypes = {\n  userId: types.string.isRequired,\n  onDelete: types.func.isRequired,\n  message: types.shape({\n    id: types.string.isRequired,\n    subject: types.string.isRequired,\n    sender: types.string.isRequired,\n    receiver: types.string.isRequired,\n    message: types.string.isRequired,\n    createdAt: types.string.isRequired,\n  }),\n};\n\nexport default Message;\n","import React from \"react\";\nimport types from \"prop-types\";\nimport { Input, Tabs, Empty } from \"antd\";\nimport styled from \"styled-components\";\nimport Message from \"./Message\";\n\nconst MessagesList = ({ messages, userId, onMessageDelete }) => {\n  if (messages.length === 0)\n    return <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n\n  return (\n    <>\n      {messages.map((message) => (\n        <Message\n          userId={userId}\n          message={message}\n          onDelete={onMessageDelete}\n          key={message.id}\n        />\n      ))}\n    </>\n  );\n};\n\nMessagesList.propTypes = {\n  userId: types.string.isRequired,\n  onMessageDelete: types.func.isRequired,\n  messages: types.array.isRequired,\n};\n\nexport default MessagesList;\n","import React from \"react\";\nimport types from \"prop-types\";\nimport { Input, Tabs } from \"antd\";\nimport styled from \"styled-components\";\nimport MessagesList from \"./MessagesList\";\n\nconst { TabPane } = Tabs;\nconst { Search } = Input;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst UserIdInput = styled(Search)`\n  margin-bottom: 40px;\n  align-self: center;\n  max-width: 400px;\n`;\n\nconst MessagesManager = ({\n  userId,\n  onUserChange,\n  onMessageDelete,\n  receivedMessages,\n  sentMessages,\n}) => {\n  return (\n    <Container>\n      <UserIdInput\n        size=\"large\"\n        placeholder=\"User ID\"\n        name=\"userId\"\n        enterButton=\"Load\"\n        onSearch={onUserChange}\n      />\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Received\" key=\"1\">\n          <MessagesList\n            userId={userId}\n            messages={receivedMessages}\n            onMessageDelete={onMessageDelete}\n          />\n        </TabPane>\n        <TabPane tab=\"Sent\" key=\"2\">\n          <MessagesList\n            userId={userId}\n            messages={sentMessages}\n            onMessageDelete={onMessageDelete}\n          />\n        </TabPane>\n      </Tabs>\n    </Container>\n  );\n};\n\nMessagesManager.propTypes = {\n  userId: types.string,\n  onUserChange: types.func.isRequired,\n  onMessageDelete: types.func.isRequired,\n  receivedMessages: types.array.isRequired,\n  sentMessages: types.array.isRequired,\n};\n\nexport default MessagesManager;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport messagesService from \"../../services/messages.service\";\nimport { message as popMessage } from \"antd\";\nimport Manage from \"./MessagesManager\";\n\nconst MessagesManagerContainer = () => {\n  const [userId, setUserId] = useState(null);\n  const [sentMessages, setSentMessages] = useState([]);\n  const [receivedMessages, setReceivedMessages] = useState([]);\n\n  useEffect(() => {\n    if (userId) loadMessages(userId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userId]);\n\n  const loadMessages = useCallback((userId) => {\n    messagesService\n      .get(userId)\n      .then((messages) => {\n        setSentMessages(messages.sent);\n        setReceivedMessages(messages.received);\n        return 1;\n      })\n      .catch(() => popMessage.error(\"Failed to get messages\"));\n  }, []);\n\n  const deleteMessage = useCallback((messageId) => {\n    messagesService\n      .deleteMessage(messageId)\n      .then(() => {\n        popMessage.success(\"message deleted\");\n        const filterFunc = (current) =>\n          current.filter((m) => m.id !== messageId);\n        setSentMessages(filterFunc);\n        setReceivedMessages(filterFunc);\n        return 1;\n      })\n      .catch(() => popMessage.error(\"Failed to delete message\"));\n  }, []);\n\n  return (\n    <Manage\n      userId={userId}\n      onUserChange={setUserId}\n      sentMessages={sentMessages}\n      receivedMessages={receivedMessages}\n      onMessageDelete={deleteMessage}\n    />\n  );\n};\n\nexport default MessagesManagerContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport MessagesManagerContainer from \"./MessagesManagerContainer\";\n\nconst Container = styled.div`\n  justify-content: center;\n  display: flex;\n`;\n\nconst ContentContainer = styled.div`\n  width: 80%;\n  padding: 4%;\n  margin-top: 10%;\n  min-width: 280px;\n  border-radius: 20px;\n`;\n\nconst MessagePage = () => {\n  return (\n    <Container>\n      <ContentContainer>\n        <MessagesManagerContainer />\n      </ContentContainer>\n    </Container>\n  );\n};\n\nexport default MessagePage;\n","import React from \"react\";\nimport { message } from \"antd\";\nimport styled from \"styled-components\";\nimport MessagePage from \"./components/messagePage/MessagePage\";\nimport ManagePage from \"./components/managePage/ManagePage\";\nimport { HashRouter, Route, NavLink } from \"react-router-dom\";\n\nmessage.config({\n  top: 42,\n});\n\nconst Nav = styled.nav``;\n\nconst NavList = styled.ul`\n  list-style-type: none;\n  background-color: #096dd9;\n  display: flex;\n  padding: 0;\n  margin: 0;\n`;\n\nconst NavItem = styled.li`\n  display: flex;\n`;\n\nconst Link = styled(NavLink)`\n  padding: 8px 16px;\n  text-align: center;\n  color: white;\n  &:hover {\n    filter: opacity(0.9);\n  }\n  &.active {\n    color: #096dd9;\n    background-color: white;\n  }\n`;\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <Nav>\n          <NavList>\n            <NavItem>\n              <Link exact to=\"/\">\n                Home\n              </Link>\n            </NavItem>\n            <NavItem>\n              <Link to=\"/newMessage\">New Message</Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n        <Route exact path=\"/\" component={ManagePage} />\n        <Route path=\"/newMessage\" component={MessagePage} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}